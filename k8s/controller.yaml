apiVersion: v1
kind: ServiceAccount
metadata:
  name: ws-cli-controller
  namespace: ws-cli
  annotations:
    iam.gke.io/gcp-service-account: ws-cli-controller@${PROJECT_ID}.iam.gserviceaccount.com
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ws-cli-controller
  namespace: ws-cli
spec:
  replicas: 2
  selector: { matchLabels: { app: ws-cli-controller } }
  template:
    metadata: { labels: { app: ws-cli-controller } }
    spec:
      serviceAccountName: ws-cli-controller
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      # Main controller container
      - name: controller
        image: ${CONTROLLER_IMG}
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
              - ALL
        imagePullPolicy: IfNotPresent
        env:
          - name: NAMESPACE
            valueFrom: { fieldRef: { fieldPath: metadata.namespace } }
          - name: RUNNER_IMAGE
            value: "${RUNNER_IMG}"
          - name: JOB_TTL_SECONDS
            value: "300"
          - name: JOB_ACTIVE_DEADLINE_SECONDS
            value: "3600"
          - name: DATABASE_URL
            valueFrom:
              secretKeyRef:
                name: pg
                key: DATABASE_URL
          - name: JWT_PRIVATE_KEY_PATH
            value: "/run/secrets/jwt/private.pem"
          - name: ALLOWED_ORIGINS
            value: "https://yourdomain.com,https://app.yourdomain.com"
          - name: ALLOWED_CODE_DOMAINS
            value: "github.com,gitlab.com,*.github.com"
          - name: NODE_ENV
            value: "production"
        ports:
          - name: http
            containerPort: 8080
        volumeMounts:
          - name: jwt-keys
            mountPath: /run/secrets/jwt
            readOnly: true
        resources:
          requests: { cpu: "100m", memory: "128Mi" }
          limits:   { cpu: "500m", memory: "512Mi" }
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3

      # Cloud SQL Proxy sidecar
      - name: cloud-sql-proxy
        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.8.0
        args:
          - "--structured-logs"
          - "--port=5432"
          - "$(INSTANCE_CONNECTION_NAME)"
        env:
          - name: INSTANCE_CONNECTION_NAME
            valueFrom:
              configMapKeyRef:
                name: cloudsql
                key: INSTANCE_CONNECTION_NAME
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
        resources:
          requests:
            cpu: "50m"
            memory: "64Mi"
          limits:
            cpu: "200m"
            memory: "128Mi"

      volumes:
        - name: jwt-keys
          secret:
            secretName: jwt

---
apiVersion: v1
kind: Service
metadata: { name: ws-cli-controller, namespace: ws-cli }
spec:
  selector: { app: ws-cli-controller }
  ports: [ { name: http, port: 80, targetPort: 8080 } ]
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ws-cli-controller
  namespace: ws-cli
  annotations:
    kubernetes.io/ingress.class: "gce"
spec:
  rules:
    - host: ${DOMAIN}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend: { service: { name: ws-cli-controller, port: { number: 80 } } }